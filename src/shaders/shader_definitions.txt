-DBRIGHT_PASS_SHADER_SHADER_SOURCE="\"#version 460 core\n\nin vec2 TexCoords;\nout vec4 FragColor;\n\nuniform sampler2D scene;\nuniform float brightnessThreshold;\n\nvoid main()\n{\n    vec3 color = texture(scene, TexCoords).rgb;\n    float brightness = dot(color, vec3(0.2126, 0.7152, 0.0722)); // Calculate brightness\n    if (brightness > brightnessThreshold) {\n        FragColor = vec4(color, 1.0); // Keep bright areas\n    } else {\n        FragColor = vec4(0.0); // Discard dark areas\n    }\n}\n\""
-DFINAL_PASS_SHADER_SHADER_SOURCE="\"#version 460 core\n\nin vec2 TexCoords;\nout vec4 FragColor;\n\nuniform sampler2D scene; // Original scene texture\nuniform sampler2D bloomBlur; // Blurred bright areas\n\nvoid main()\n{\n    vec3 sceneColor = texture(scene, TexCoords).rgb;\n    vec3 bloomColor = texture(bloomBlur, TexCoords).rgb;\n    FragColor = vec4(sceneColor + bloomColor, 1.0); // Add the bloom to the original scene\n}\n\""
-DFRAGMENT_SHADER_SHADER_SOURCE="\"#version 460 core\nin vec2 TexCoords;\nout vec4 FragColor;\nuniform sampler2D text;\nuniform vec3 textColor;\nvoid main()\n{\n   vec4 sampled = vec4(1.0, 1.0, 1.0, texture(text, TexCoords).r);\n   FragColor = vec4(textColor, 1.0) * sampled;\n}\n\""
-DH_BLUR_SHADER_SHADER_SOURCE="\"#version 460 core\n\nin vec2 TexCoords;\nout vec4 FragColor;\n\nuniform sampler2D image;\nuniform float blurAmount; // Can be set to control blur strength\n\nvoid main()\n{\n    vec2 tex_offset = vec2(blurAmount, 0.0); // Blur horizontally\n    vec3 result = vec3(0.0);\n    result += texture(image, TexCoords - 4.0 * tex_offset).rgb * 0.05;\n    result += texture(image, TexCoords - 3.0 * tex_offset).rgb * 0.09;\n    result += texture(image, TexCoords - 2.0 * tex_offset).rgb * 0.12;\n    result += texture(image, TexCoords - 1.0 * tex_offset).rgb * 0.15;\n    result += texture(image, TexCoords).rgb * 0.16;\n    result += texture(image, TexCoords + 1.0 * tex_offset).rgb * 0.15;\n    result += texture(image, TexCoords + 2.0 * tex_offset).rgb * 0.12;\n    result += texture(image, TexCoords + 3.0 * tex_offset).rgb * 0.09;\n    result += texture(image, TexCoords + 4.0 * tex_offset).rgb * 0.05;\n\n    FragColor = vec4(result, 1.0);\n}\n\""
-DV_BLUR_SHADER_SHADER_SOURCE="\"\""
-DVERTEX_SHADER_SHADER_SOURCE="\"#version 460 core\nlayout (location = 0) in vec4 vertex;\nout vec2 TexCoords;\nuniform mat4 projection;\nvoid main()\n{\n   gl_Position = projection * vec4(vertex.xy, 0.0, 1.0);\n   TexCoords = vertex.zw;\n}\n\""
